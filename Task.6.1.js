// Вычислить сумму чисел до данного
// важность: 5
// Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

// Например:

// sumTo(1) = 1
// sumTo(2) = 2 + 1 = 3
// sumTo(3) = 3 + 2 + 1 = 6
// sumTo(4) = 4 + 3 + 2 + 1 = 10
// ...
// sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
// Сделайте три варианта решения:

// С использованием цикла.
// Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
// С использованием формулы арифметической прогрессии.
// Пример работы вашей функции:

{
    function sumTo(n) {
        let sum = 0
        for (let i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}

{
    function sumTo(n) {
        if (n <= 1)
            return n;
        else
            return n + sumTo(n - 1);
    }

}

{
    function sumTo(n) {
        return n * (n + 1) / 2;
    }
}

//---------------------------------------------------------------------------------------------------

// Вычислить факториал
// важность: 4
// Факториал натурального числа – это число, умноженное на "себя минус один", затем на "себя минус два", и так далее до 1. 
// Факториал n обозначается как n!

// Определение факториала можно записать как:

// n! = n * (n - 1) * (n - 2) * ...*1
// Примеры значений для разных n:

// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.

// alert( factorial(5) ); // 120
// P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6

{
    function factorial(n) {
        if (n === 0 || n === 1)
            return 1;
        else
            return n * factorial(n - 1);

    }
}



//------------------------------------------------------------------------------------------

// Числа Фибоначчи
// важность: 5
// Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. 
// То есть, следующее число получается как сумма двух предыдущих.

// Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....

// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.

// Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.



{
    function fib(n) {
        if (n <= 1)
            return n;
        else
            return fib(n - 1) + fib(n - 2);
    }
}


//--------------------------------------------------------------------------------------------------------

// Вывод односвязного списка
// важность: 5
// Допустим, у нас есть односвязный список (как описано в главе Рекурсия и стек):

// let list = {
//   value: 1,
//   next: {
//     value: 2,
//     next: {
//       value: 3,
//       next: {
//         value: 4,
//         next: null
//       }
//     }
//   }
// };
// Напишите функцию printList(list), которая выводит элементы списка по одному.

// Сделайте два варианта решения: используя цикл и через рекурсию.

// Как лучше: с рекурсией или без?


{
    function printList(list) {

        if (list !== null) {
            console.log(list.value);
            printList(list.next)
        }
    }
}

{
    function printList(list) {
        let temp = list;

        while (temp) {
            console.log(temp.value);
            temp = temp.next;
        }

    }
}


//-----------------------------------------------------------------------------------------------
// Вывод односвязного списка в обратном порядке
// важность: 5
// Выведите односвязный список из предыдущего задания Вывод односвязного списка в обратном порядке.

// Сделайте два решения: с использованием цикла и через рекурсию.


{
    function reversePrintList(list) {
        if (list.next) {
            reversePrintList(list.next)
        }
        console.log(list.value);
    }
}

{
    function reversePrintList(list) {
        let temp = list;
        let stack = [];
        while (temp) {
            stack.push(temp.value)
            temp = temp.next;
        }
        for (let i = stack.length - 1; i <= 0; i--) {
            console.log(stack[i]);
        }
    }
}

